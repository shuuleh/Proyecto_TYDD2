// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/13/2023 16:29:57"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Control1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Control1_vlg_sample_tst(
	clock,
	reset,
	SI_SD,
	sampler_tx
);
input  clock;
input  reset;
input [1:0] SI_SD;
output sampler_tx;

reg sample;
time current_time;
always @(clock or reset or SI_SD)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Control1_vlg_check_tst (
	D_I,
	PD_PI,
	sampler_rx
);
input [3:0] D_I;
input [3:0] PD_PI;
input sampler_rx;

reg [3:0] D_I_expected;
reg [3:0] PD_PI_expected;

reg [3:0] D_I_prev;
reg [3:0] PD_PI_prev;

reg [3:0] D_I_expected_prev;
reg [3:0] PD_PI_expected_prev;

reg [3:0] last_D_I_exp;
reg [3:0] last_PD_PI_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	D_I_prev = D_I;
	PD_PI_prev = PD_PI;
end

// update expected /o prevs

always @(trigger)
begin
	D_I_expected_prev = D_I_expected;
	PD_PI_expected_prev = PD_PI_expected;
end


// expected D_I[ 3 ]
initial
begin
	D_I_expected[3] = 1'bX;
end 
// expected D_I[ 2 ]
initial
begin
	D_I_expected[2] = 1'bX;
end 
// expected D_I[ 1 ]
initial
begin
	D_I_expected[1] = 1'bX;
end 
// expected D_I[ 0 ]
initial
begin
	D_I_expected[0] = 1'bX;
end 
// expected PD_PI[ 3 ]
initial
begin
	PD_PI_expected[3] = 1'bX;
end 
// expected PD_PI[ 2 ]
initial
begin
	PD_PI_expected[2] = 1'bX;
end 
// expected PD_PI[ 1 ]
initial
begin
	PD_PI_expected[1] = 1'bX;
end 
// expected PD_PI[ 0 ]
initial
begin
	PD_PI_expected[0] = 1'bX;
end 
// generate trigger
always @(D_I_expected or D_I or PD_PI_expected or PD_PI)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected D_I = %b | expected PD_PI = %b | ",D_I_expected_prev,PD_PI_expected_prev);
	$display("| real D_I = %b | real PD_PI = %b | ",D_I_prev,PD_PI_prev);
`endif
	if (
		( D_I_expected_prev[0] !== 1'bx ) && ( D_I_prev[0] !== D_I_expected_prev[0] )
		&& ((D_I_expected_prev[0] !== last_D_I_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_I[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_I_expected_prev);
		$display ("     Real value = %b", D_I_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D_I_exp[0] = D_I_expected_prev[0];
	end
	if (
		( D_I_expected_prev[1] !== 1'bx ) && ( D_I_prev[1] !== D_I_expected_prev[1] )
		&& ((D_I_expected_prev[1] !== last_D_I_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_I[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_I_expected_prev);
		$display ("     Real value = %b", D_I_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D_I_exp[1] = D_I_expected_prev[1];
	end
	if (
		( D_I_expected_prev[2] !== 1'bx ) && ( D_I_prev[2] !== D_I_expected_prev[2] )
		&& ((D_I_expected_prev[2] !== last_D_I_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_I[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_I_expected_prev);
		$display ("     Real value = %b", D_I_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D_I_exp[2] = D_I_expected_prev[2];
	end
	if (
		( D_I_expected_prev[3] !== 1'bx ) && ( D_I_prev[3] !== D_I_expected_prev[3] )
		&& ((D_I_expected_prev[3] !== last_D_I_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_I[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_I_expected_prev);
		$display ("     Real value = %b", D_I_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D_I_exp[3] = D_I_expected_prev[3];
	end
	if (
		( PD_PI_expected_prev[0] !== 1'bx ) && ( PD_PI_prev[0] !== PD_PI_expected_prev[0] )
		&& ((PD_PI_expected_prev[0] !== last_PD_PI_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PD_PI[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PD_PI_expected_prev);
		$display ("     Real value = %b", PD_PI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PD_PI_exp[0] = PD_PI_expected_prev[0];
	end
	if (
		( PD_PI_expected_prev[1] !== 1'bx ) && ( PD_PI_prev[1] !== PD_PI_expected_prev[1] )
		&& ((PD_PI_expected_prev[1] !== last_PD_PI_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PD_PI[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PD_PI_expected_prev);
		$display ("     Real value = %b", PD_PI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PD_PI_exp[1] = PD_PI_expected_prev[1];
	end
	if (
		( PD_PI_expected_prev[2] !== 1'bx ) && ( PD_PI_prev[2] !== PD_PI_expected_prev[2] )
		&& ((PD_PI_expected_prev[2] !== last_PD_PI_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PD_PI[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PD_PI_expected_prev);
		$display ("     Real value = %b", PD_PI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PD_PI_exp[2] = PD_PI_expected_prev[2];
	end
	if (
		( PD_PI_expected_prev[3] !== 1'bx ) && ( PD_PI_prev[3] !== PD_PI_expected_prev[3] )
		&& ((PD_PI_expected_prev[3] !== last_PD_PI_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PD_PI[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PD_PI_expected_prev);
		$display ("     Real value = %b", PD_PI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PD_PI_exp[3] = PD_PI_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Control1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg reset;
reg [1:0] SI_SD;
// wires                                               
wire [3:0] D_I;
wire [3:0] PD_PI;

wire sampler;                             

// assign statements (if any)                          
Control1 i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.D_I(D_I),
	.PD_PI(PD_PI),
	.reset(reset),
	.SI_SD(SI_SD)
);

// clock
always
begin
	clock = 1'b0;
	clock = #25000 1'b1;
	#25000;
end 

// reset
initial
begin
	reset = 1'b0;
end 
// SI_SD[ 1 ]
initial
begin
	SI_SD[1] = 1'b0;
	SI_SD[1] = #400000 1'b1;
	SI_SD[1] = #400000 1'b0;
end 
// SI_SD[ 0 ]
initial
begin
	repeat(2)
	begin
		SI_SD[0] = 1'b0;
		SI_SD[0] = #200000 1'b1;
		# 200000;
	end
	SI_SD[0] = 1'b0;
end 

Control1_vlg_sample_tst tb_sample (
	.clock(clock),
	.reset(reset),
	.SI_SD(SI_SD),
	.sampler_tx(sampler)
);

Control1_vlg_check_tst tb_out(
	.D_I(D_I),
	.PD_PI(PD_PI),
	.sampler_rx(sampler)
);
endmodule

