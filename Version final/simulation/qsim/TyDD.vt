// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/14/2023 13:28:31"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    TyDD
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TyDD_vlg_sample_tst(
	clk,
	pin_name2,
	pin_name3,
	pin_name4,
	pin_name5,
	sampler_tx
);
input  clk;
input  pin_name2;
input  pin_name3;
input  pin_name4;
input  pin_name5;
output sampler_tx;

reg sample;
time current_time;
always @(clk or pin_name2 or pin_name3 or pin_name4 or pin_name5)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module TyDD_vlg_check_tst (
	D11,
	D12,
	D21,
	D22,
	locked,
	Rueda1,
	RuedaD,
	sampler_rx
);
input  D11;
input  D12;
input  D21;
input  D22;
input  locked;
input  Rueda1;
input  RuedaD;
input sampler_rx;

reg  D11_expected;
reg  D12_expected;
reg  D21_expected;
reg  D22_expected;
reg  locked_expected;
reg  Rueda1_expected;
reg  RuedaD_expected;

reg  D11_prev;
reg  D12_prev;
reg  D21_prev;
reg  D22_prev;
reg  locked_prev;
reg  Rueda1_prev;
reg  RuedaD_prev;

reg  D11_expected_prev;
reg  D12_expected_prev;
reg  D21_expected_prev;
reg  D22_expected_prev;
reg  locked_expected_prev;
reg  Rueda1_expected_prev;
reg  RuedaD_expected_prev;

reg  last_D11_exp;
reg  last_D12_exp;
reg  last_D21_exp;
reg  last_D22_exp;
reg  last_locked_exp;
reg  last_Rueda1_exp;
reg  last_RuedaD_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	D11_prev = D11;
	D12_prev = D12;
	D21_prev = D21;
	D22_prev = D22;
	locked_prev = locked;
	Rueda1_prev = Rueda1;
	RuedaD_prev = RuedaD;
end

// update expected /o prevs

always @(trigger)
begin
	D11_expected_prev = D11_expected;
	D12_expected_prev = D12_expected;
	D21_expected_prev = D21_expected;
	D22_expected_prev = D22_expected;
	locked_expected_prev = locked_expected;
	Rueda1_expected_prev = Rueda1_expected;
	RuedaD_expected_prev = RuedaD_expected;
end



// expected D11
initial
begin
	D11_expected = 1'bX;
end 

// expected D12
initial
begin
	D12_expected = 1'bX;
end 

// expected D21
initial
begin
	D21_expected = 1'bX;
end 

// expected D22
initial
begin
	D22_expected = 1'bX;
end 

// expected locked
initial
begin
	locked_expected = 1'bX;
end 

// expected Rueda1
initial
begin
	Rueda1_expected = 1'bX;
end 

// expected RuedaD
initial
begin
	RuedaD_expected = 1'bX;
end 
// generate trigger
always @(D11_expected or D11 or D12_expected or D12 or D21_expected or D21 or D22_expected or D22 or locked_expected or locked or Rueda1_expected or Rueda1 or RuedaD_expected or RuedaD)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected D11 = %b | expected D12 = %b | expected D21 = %b | expected D22 = %b | expected locked = %b | expected Rueda1 = %b | expected RuedaD = %b | ",D11_expected_prev,D12_expected_prev,D21_expected_prev,D22_expected_prev,locked_expected_prev,Rueda1_expected_prev,RuedaD_expected_prev);
	$display("| real D11 = %b | real D12 = %b | real D21 = %b | real D22 = %b | real locked = %b | real Rueda1 = %b | real RuedaD = %b | ",D11_prev,D12_prev,D21_prev,D22_prev,locked_prev,Rueda1_prev,RuedaD_prev);
`endif
	if (
		( D11_expected_prev !== 1'bx ) && ( D11_prev !== D11_expected_prev )
		&& ((D11_expected_prev !== last_D11_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D11 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D11_expected_prev);
		$display ("     Real value = %b", D11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D11_exp = D11_expected_prev;
	end
	if (
		( D12_expected_prev !== 1'bx ) && ( D12_prev !== D12_expected_prev )
		&& ((D12_expected_prev !== last_D12_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D12 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D12_expected_prev);
		$display ("     Real value = %b", D12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D12_exp = D12_expected_prev;
	end
	if (
		( D21_expected_prev !== 1'bx ) && ( D21_prev !== D21_expected_prev )
		&& ((D21_expected_prev !== last_D21_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D21 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D21_expected_prev);
		$display ("     Real value = %b", D21_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D21_exp = D21_expected_prev;
	end
	if (
		( D22_expected_prev !== 1'bx ) && ( D22_prev !== D22_expected_prev )
		&& ((D22_expected_prev !== last_D22_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D22 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D22_expected_prev);
		$display ("     Real value = %b", D22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D22_exp = D22_expected_prev;
	end
	if (
		( locked_expected_prev !== 1'bx ) && ( locked_prev !== locked_expected_prev )
		&& ((locked_expected_prev !== last_locked_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port locked :: @time = %t",  $realtime);
		$display ("     Expected value = %b", locked_expected_prev);
		$display ("     Real value = %b", locked_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_locked_exp = locked_expected_prev;
	end
	if (
		( Rueda1_expected_prev !== 1'bx ) && ( Rueda1_prev !== Rueda1_expected_prev )
		&& ((Rueda1_expected_prev !== last_Rueda1_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rueda1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rueda1_expected_prev);
		$display ("     Real value = %b", Rueda1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Rueda1_exp = Rueda1_expected_prev;
	end
	if (
		( RuedaD_expected_prev !== 1'bx ) && ( RuedaD_prev !== RuedaD_expected_prev )
		&& ((RuedaD_expected_prev !== last_RuedaD_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RuedaD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RuedaD_expected_prev);
		$display ("     Real value = %b", RuedaD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RuedaD_exp = RuedaD_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module TyDD_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg pin_name2;
reg pin_name3;
reg pin_name4;
reg pin_name5;
// wires                                               
wire D11;
wire D12;
wire D21;
wire D22;
wire locked;
wire Rueda1;
wire RuedaD;

wire sampler;                             

// assign statements (if any)                          
TyDD i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.D11(D11),
	.D12(D12),
	.D21(D21),
	.D22(D22),
	.locked(locked),
	.pin_name2(pin_name2),
	.pin_name3(pin_name3),
	.pin_name4(pin_name4),
	.pin_name5(pin_name5),
	.Rueda1(Rueda1),
	.RuedaD(RuedaD)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// pin_name2
initial
begin
	pin_name2 = 1'b1;
end 

// pin_name3
initial
begin
	pin_name3 = 1'b1;
end 

// pin_name4
initial
begin
	pin_name4 = 1'b1;
end 

// pin_name5
initial
begin
	pin_name5 = 1'b1;
end 

TyDD_vlg_sample_tst tb_sample (
	.clk(clk),
	.pin_name2(pin_name2),
	.pin_name3(pin_name3),
	.pin_name4(pin_name4),
	.pin_name5(pin_name5),
	.sampler_tx(sampler)
);

TyDD_vlg_check_tst tb_out(
	.D11(D11),
	.D12(D12),
	.D21(D21),
	.D22(D22),
	.locked(locked),
	.Rueda1(Rueda1),
	.RuedaD(RuedaD),
	.sampler_rx(sampler)
);
endmodule

